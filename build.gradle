/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'stefan.marx' at '05.11.13 10:51' with Gradle 1.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.7/userguide/tutorial_java_projects.html
 */


task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}



allprojects
{

    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        // Use 'maven central' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenCentral()
            maven {
                url "https://raw.github.com/Appdynamics/artifact-library/master/repo/"
            }
        maven {
            url "file:///vlab/maven/private-artifact-library/repo/"
        }

    }

    test.useTestNG()

    dependencies {
   
        testCompile "org.testng:testng:6.8.1"
    }

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        // options.bootClasspath = "/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar"
    }

}

configurations {
    agentBinary
    dynamicServices
}

dependencies {
    agentBinary "com.appdynamics:AppServerAgent:3.9.6@zip"
    dynamicServices "com.appdynamics.agent.services:genericInterceptor:3.9.3@jar"
    dynamicServices "com.appdynamics.agent.services:ScanThreadsForBTs:3.9.3@jar"
    dynamicServices "com.appdynamics.agent.services:SocketTrace:3.9.3@jar"
    dynamicServices "com.appdynamics.agent.services:ThreadProfiler:3.9.3@jar"
}

task installServices(type:Copy) {
    from configurations.dynamicServices
    into "build/sandbox/services"
}
task installAgent (type: Copy){
    configurations.agentBinary.filter { it.toString().endsWith(".zip") }.each{
        from zipTree(it)
    }
    into 'build/sandbox/agent'
}

task fullInstall () {

    doLast() {
        println()

        copy {
            from project(":BackendServices").findJettyDir()
            into 'build/sandbox/web/node4080'
        }

        copy {
            from('src/main/shell') {
                include '**/*.sh'
            }


            into "build/sandbox"
        }

        copy {
            from project(":SimpleFrontend").file("build/install/SandboxMain")
            into "build/sandbox/SandboxClient"
        }

        copy {
            from project(":TCPBackend").file("build/install/TCPBackend")
            into "build/sandbox/TCPBackend"
        }
        copy {
            from project(":RMIBackend").file("build/install/RMIBackend")
            into "build/sandbox/RMIBackend"
        }
        copy {
            from project(":NettyServer").file("build/install/NettyServer")
            into "build/sandbox/NettyServer"
        }

//        copy {
//            from appAgentHome
//            into "build/sandbox/agent"
//        }
    }

}

task packageApp(type:Zip, dependsOn:fullInstall) {
    from ('build/sandbox') {
        include "**/*"
    }
    
}


fullInstall.dependsOn(":SimpleFrontend:installApp")
fullInstall.dependsOn(":BackendServices:deployToJetty")
fullInstall.dependsOn(":TCPBackend:installApp")
fullInstall.dependsOn(":RMIBackend:installApp")
fullInstall.dependsOn(":NettyServer:installApp")

fullInstall.dependsOn( installAgent)

build.dependsOn(fullInstall);


